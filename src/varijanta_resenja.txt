package vaterpolo.exception;

public class VaterpoloException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public VaterpoloException(String message) {
		super(message);
	}
}

package vaterpolo;
import vaterpolo.exception.VaterpoloException;

public class Vaterpolista {

	private String imePrezime;
	private String klub;
	private int poeni;

	public String getImePrezime() {
		return imePrezime;
	}

	public void setImePrezime(String imePrezime) {
		if (imePrezime == null || imePrezime.isEmpty()) {
			throw new VaterpoloException("Ime i prezime ne mogu biti null, niti prazan string.");
		}
		this.imePrezime = imePrezime;
	}

	public String getKlub() {
		return klub;
	}

	public void setKlub(String klub) {
		if (klub == null || klub.isEmpty()) {
			throw new VaterpoloException("Klub ne moze biti null, niti prazan string.");
		}
		this.klub = klub;
	}

	public int getPoeni() {
		return poeni;
	}

	public void setPoeni(int poeni) {
		if (poeni < 0) {
			throw new VaterpoloException("Poeni ne mogu biti manji od nule.");
		}
		this.poeni = poeni;
	}
	
	@Override
	public String toString() {
		return "Ime i prezime: " + imePrezime + ", klub: " + klub + ", poeni: " + poeni;
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Vaterpolista))
			throw new VaterpoloException("Nije prosledjen objekat klase Vaterpolista");

		Vaterpolista v = (Vaterpolista) obj;

		return this.imePrezime.equals(v.imePrezime) && this.klub.equals(v.klub);
	}
}

package vaterpolo;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;

public class VaterpoloUtakmica {

	private List<Vaterpolista> vaterpolisti = new LinkedList<>();

	public void napraviIzvestaj() {
		try (PrintWriter out = new PrintWriter(
									new BufferedWriter(
											new FileWriter("izvestaj.txt")))) {
			
			for (Vaterpolista vaterpolista : vaterpolisti) {
				if (vaterpolista.getPoeni() >= 2) {
					out.print(vaterpolista.getImePrezime());
					out.print("#");
					out.print(vaterpolista.getKlub());
					out.print("#");
					out.print(vaterpolista.getPoeni());
					out.println();
				}
			}
		} catch (Exception e) {
			System.out.println("Greska: " + e);
		}
	}

	public void dodajVaterpolistu(String imePrezime, String klub, int poeni) {
		Vaterpolista v = new Vaterpolista();
		v.setImePrezime(imePrezime);
		v.setKlub(klub);
		v.setPoeni(poeni);

		if (!vaterpolisti.contains(v)) {
			vaterpolisti.add(v);
		} else {
			try (PrintWriter out = new PrintWriter(
										new BufferedWriter(
												new FileWriter("greske.txt")))) {
				
				out.println(v);
				out.println("Vec postoji u listi");
			} catch (Exception e) {
				System.out.println("Greska: " + e.getMessage());
			}
		}
	}

	public void ucitajVaterpoliste() {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			
		for (int i = 0; i < 22; i++) {
			// Posto u slucaju greske, metoda treba da omoguci korisniku da nastavi 
			// unosenje ostalih vaterpolista, try/catch blok stavljamo unutar for petlje. 
			// U slucaju greske, ona ce biti uhvacena u catch bloku i petlja ce nastaviti. 
			try {
				System.out.print("Unesite ime i prezime: ");
				String imePrezime = br.readLine();

				System.out.print("Unesite klub: ");
				String klub = br.readLine();

				System.out.print("Unesite broj poena: ");
				int poeni = Integer.parseInt(br.readLine());

				Vaterpolista v = new Vaterpolista();
				v.setImePrezime(imePrezime);
				v.setKlub(klub);
				v.setPoeni(poeni);
				
				vaterpolisti.add(v);
			} catch (Exception e) {
				System.out.println("Greska: " + e);
			}
		}
	}
}


package ispravka_koda;

public class StringIspisivac3 {
	
	public static void ispisiKvadrat(String[] niz) {
		String prazno = "";
		int j = 0;
		System.out.println('*' + niz[0] + '*');
		while (j < niz[0].length()) {
			prazno = prazno + " ";
			j++;
		}
		for (int i = 0; i < niz[1].length(); i++)
			System.out.println(niz[1].charAt(i) + prazno + niz[2].charAt(i));
		System.out.println('*' + niz[3] + '*');
	}
}

package ispravka_koda;

public class ProbaStringIspisivac4 {

	public static void main(String[] args) {
		String[] niz = new String[] { "BELO", "CRNO", "ZUTO", "SIVO" };

		StringIspisivac3.ispisiKvadrat(niz);
	}
}

